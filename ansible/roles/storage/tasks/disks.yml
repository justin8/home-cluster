---
# 1. Ensure cryptsetup is installed
- name: Ensure cryptsetup is installed
  ansible.builtin.package:
    name: cryptsetup
    state: present

# 2. Create keyfile directory with correct permissions and SELinux context
- name: Ensure /etc/cryptsetup-keys.d exists
  ansible.builtin.file:
    path: /etc/cryptsetup-keys.d
    state: directory
    owner: root
    group: root
    mode: "0700"

- name: Write base64-decoded disk encryption key to keyfile
  ansible.builtin.copy:
    content: "{{ disk_encryption_key | b64decode }}"
    dest: /etc/cryptsetup-keys.d/data-disk.key
    owner: root
    group: root
    mode: "0400"

# 3. Find data and parity partitions by partlabel (separately, support multiple parity disks)
- name: Find partitions labeled data-*
  ansible.builtin.find:
    paths: /dev/disk/by-partlabel
    patterns: "data-*"
    file_type: any
  register: data_part_find

- name: Find partitions labeled parity-*
  ansible.builtin.find:
    paths: /dev/disk/by-partlabel
    patterns: "parity-*"
    file_type: any
  register: parity_part_find

- name: Set fact for data disks
  ansible.builtin.set_fact:
    data_partitions: "{{ data_part_find.files | map(attribute='path') | list }}"

- name: Set fact for parity disks
  ansible.builtin.set_fact:
    parity_partitions: "{{ parity_part_find.files | map(attribute='path') | list }}"

- name: Set fact for all encrypted partitions
  ansible.builtin.set_fact:
    encrypted_partitions: "{{ data_partitions + parity_partitions }}"

# 4. Configure /etc/crypttab for each encrypted partition
- name: Configure /etc/crypttab for encrypted partitions
  ansible.builtin.lineinfile:
    path: /etc/crypttab
    create: true
    mode: 644
    regexp: "^crypt-{{ item | basename }} "
    line: "crypt-{{ item | basename }} {{ item }} /etc/cryptsetup-keys.d/data-disk.key luks"
    state: present
  loop: "{{ encrypted_partitions }}"
  when: encrypted_partitions | length > 0

# After the crypttab modification task, decrypt partitions straight away
- name: Decrypt partitions now
  ansible.builtin.shell: |
    systemctl daemon-reload
    systemctl restart 'systemd-cryptsetup@*.service'
  when: encrypted_partitions | length > 0

# 5. Create mount points for decrypted devices
- name: Create mount points for decrypted devices
  ansible.builtin.file:
    path: "/mnt/{{ item | basename }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop: "{{ encrypted_partitions }}"
  when: encrypted_partitions | length > 0

# Remove unmanaged /dev/mapper/crypt-* lines from /etc/fstab
- name: Remove unmanaged crypt devices from fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: "^/dev/mapper/crypt-"
    state: absent
    backup: true

# 6. Ensure /etc/fstab has entries for decrypted devices
- name: Ensure /etc/fstab has entries for decrypted devices
  ansible.builtin.lineinfile:
    path: /etc/fstab
    create: true
    regexp: "^/dev/mapper/crypt-{{ item | basename }} "
    line: "/dev/mapper/crypt-{{ item | basename }} /mnt/{{ item | basename }} ext4 defaults 0 2"
    state: present
    mode: 644
  loop: "{{ encrypted_partitions }}"
  when: encrypted_partitions | length > 0

- name: Mount all filesystems
  ansible.builtin.shell: |
    systemctl daemon-reload
    mount -a
  changed_when: true
  when: encrypted_partitions | length > 0

# 7. Configure mergerfs pool at /storage using tigattack.mergerfs role
- name: Configure mergerfs pool at /storage using tigattack.mergerfs role
  ansible.builtin.include_role:
    name: tigattack.mergerfs
  vars:
    mergerfs_mounts:
      - path: /storage
        branches:
          - /mnt/data-*
        options: defaults,nonempty,default_permissions,allow_other,use_ino,cache.files=off,moveonenospc=true,dropcacheonclose=true,category.create=pfrd,minfreespace=1G,posix_acl=true,fsname=mergerfs
  when: encrypted_partitions | length > 0

# 8. Install snapraid and snapraid-runner
- name: Install snapraid
  ansible.builtin.package:
    name: snapraid
    state: present

- name: Ensure git is installed (for snapraid-runner)
  ansible.builtin.package:
    name: git
    state: present

- name: Download or update snapraid-runner from GitHub
  ansible.builtin.git:
    repo: "https://github.com/justin8/snapraid-runner.git"
    dest: /opt/snapraid-runner
    version: master
    update: true
    force: true
    accept_hostkey: true
    clone: true
    bare: false
    depth: 1

- name: Install snapraid-runner.conf
  ansible.builtin.template:
    src: snapraid-runner.conf.j2
    dest: /opt/snapraid-runner/snapraid-runner.conf
    owner: root
    group: root
    mode: "0600"

- name: Install snapraid.conf
  ansible.builtin.template:
    src: snapraid.conf.j2
    dest: /etc/snapraid.conf
    owner: root
    group: root
    mode: "0644"

- name: Ensure cronie (cron daemon) is installed
  ansible.builtin.package:
    name: cronie
    state: present

- name: Ensure crond service is enabled and running
  ansible.builtin.service:
    name: crond
    state: started
    enabled: true

- name: Ensure snapraid-runner daily cron job exists
  ansible.builtin.cron:
    name: "snapraid-runner daily"
    user: root
    minute: 0
    hour: 5
    job: "/opt/snapraid-runner/snapraid-runner.py -c /opt/snapraid-runner/snapraid-runner.conf && curl -fsS -m 10 --retry 5 -o /dev/null {{snapraid_runner_healthcheck_url}}"
    state: present


# 9. Setup /home for samba user shares
- name: Bind mount /storage/home to /home
  ansible.builtin.lineinfile:
    path: /etc/fstab
    line: "/storage/home /home none bind 0 0"
    state: present

- name: Ensure /home is mounted
  ansible.builtin.shell: |
    mount -a
  changed_when: true

# 10. Cleanup section: unmount and remove stale mount points and mergerfs if no data disks
- name: Find existing /mnt/data-* mount points
  ansible.builtin.find:
    paths: /mnt
    patterns: "data-*"
    file_type: directory
  register: existing_mounts

- name: Unmount and remove stale mount points
  when: existing_mounts.matched > 0
  block:
    - name: Unmount stale mount point
      ansible.posix.mount:
        path: "{{ item.path }}"
        state: unmounted
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', encrypted_partitions | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
    - name: Remove stale mount point directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', encrypted_partitions | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
