---
- name: Find disks labeled data-*
  ansible.builtin.find:
    paths: /dev/disk/by-label
    patterns: "data-*"
    file_type: any
  register: data_disk_find

- name: Set fact for data disks
  ansible.builtin.set_fact:
    data_disks: "{{ data_disk_find.files | map(attribute='path') | list }}"

- name: Create data disk mount points
  ansible.builtin.file:
    path: "/mnt/{{ item | basename }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop: "{{ data_disks }}"
  when: data_disks | length > 0

- name: Mount data disks
  ansible.posix.mount:
    path: "/mnt/{{ item | basename }}"
    src: "{{ item }}"
    fstype: ext4
    state: mounted
  loop: "{{ data_disks }}"
  when: data_disks | length > 0

- name: Create parity disk mount point
  ansible.builtin.file:
    path: "/mnt/parity-1"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Mount parity disk
  ansible.posix.mount:
    path: /mnt/parity-1
    src: /dev/disk/by-label/parity-1
    fstype: ext4
    state: mounted

- name: Configure mergerfs pool at /storage using tigattack.mergerfs role
  ansible.builtin.include_role:
    name: tigattack.mergerfs
  vars:
    mergerfs_mounts:
      - path: /storage
        branches:
          - /mnt/data-*
        options: defaults,nonempty,default_permissions,allow_other,use_ino,cache.files=off,moveonenospc=true,dropcacheonclose=true,category.create=pfrd,minfreespace=1G,posix_acl=true,fsname=mergerfs
    mergerfs_remove_undefined_mounts: true
  when: data_disks | length > 0

- name: Install snapraid
  ansible.builtin.package:
    name: snapraid
    state: present

- name: Ensure git is installed (for snapraid-runner)
  ansible.builtin.package:
    name: git
    state: present

- name: Download or update snapraid-runner from GitHub
  ansible.builtin.git:
    repo: "https://github.com/justin8/snapraid-runner.git"
    dest: /opt/snapraid-runner
    version: master
    update: yes
    force: yes
    accept_hostkey: yes
    clone: yes
    bare: no
    depth: 1

- name: Install snapraid-runner.conf
  ansible.builtin.template:
    src: snapraid-runner.conf.j2
    dest: /opt/snapraid-runner/snapraid-runner.conf
    owner: root
    group: root
    mode: "0600"

- name: Install snapraid.conf
  ansible.builtin.template:
    src: snapraid.conf.j2
    dest: /etc/snapraid.conf
    owner: root
    group: root
    mode: "0644"

- name: Ensure cronie (cron daemon) is installed
  ansible.builtin.package:
    name: cronie
    state: present

- name: Ensure crond service is enabled and running
  ansible.builtin.service:
    name: crond
    state: started
    enabled: true

- name: Ensure snapraid-runner daily cron job exists
  ansible.builtin.cron:
    name: "snapraid-runner daily"
    user: root
    minute: 0
    hour: 5
    job: "/opt/snapraid-runner/snapraid-runner.py -c /opt/snapraid-runner/snapraid-runner.conf"
    state: present

# Cleanup section: unmount and remove stale mount points and mergerfs if no data disks
- name: Find existing /mnt/data-* mount points
  ansible.builtin.find:
    paths: /mnt
    patterns: "data-*"
    file_type: directory
  register: existing_mounts

- name: Unmount and remove stale mount points
  when: existing_mounts.matched > 0
  block:
    - name: Unmount stale mount point
      ansible.posix.mount:
        path: "{{ item.path }}"
        state: unmounted
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', data_disks | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
    - name: Remove stale mount point directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', data_disks | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
