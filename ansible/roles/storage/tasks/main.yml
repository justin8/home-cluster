---
# tasks for storage role
- name: Install snapraid
  ansible.builtin.package:
    name: snapraid
    state: present

- name: Find disks labeled data-*
  ansible.builtin.find:
    paths: /dev/disk/by-label
    patterns: "data-*"
    file_type: any
  register: data_disk_find

- name: Set fact for data disks
  ansible.builtin.set_fact:
    data_disks: "{{ data_disk_find.files | map(attribute='path') | list }}"

- name: Create mount points
  ansible.builtin.file:
    path: "/mnt/{{ item | basename }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop: "{{ data_disks }}"
  when: data_disks | length > 0

- name: Mount data disks
  ansible.posix.mount:
    path: "/mnt/{{ item | basename }}"
    src: "{{ item }}"
    fstype: ext4
    state: mounted
  loop: "{{ data_disks }}"
  when: data_disks | length > 0

- name: Configure mergerfs pool at /storage using tigattack.mergerfs role
  ansible.builtin.include_role:
    name: tigattack.mergerfs
  vars:
    mergerfs_mounts:
      - path: /storage
        branches:
          - /mnt/data-*
        options: >
          defaults,nonempty,default_permissions,allow_other,use_ino,cache.files=off,
          moveonenospc=true,dropcacheonclose=true,category.create=pfrd,
          minfreespace=1G,posix_acl=true,fsname=mergerfs
    mergerfs_remove_undefined_mounts: true
  when: data_disks | length > 0

# --- Samba server configuration using vladgh.samba collection ---
- name: Configure Samba server
  ansible.builtin.include_role:
    name: vladgh.samba.server
  vars:
    samba_global_config_extras: |
      force user = downloads
      force group = downloads
      force create mode = 665
      force directory mode = 775
    samba_users: "{{ users }}"
    samba_shares: "{{ smb_shares }}"
    samba_server_min_protocol: SMB2
    samba_server_max_protocol: SMB3
    samba_server_interfaces:
      - lo
      - eth0
    samba_server_bind_interfaces_only: true
  when: data_disks | length > 0

- name: Open Samba ports in firewalld
  ansible.posix.firewalld:
    service: samba
    permanent: true
    state: enabled
    immediate: true
  when: data_disks | length > 0

# --- Cleanup section: unmount and remove stale mount points and mergerfs if no data disks ---

- name: Find existing /mnt/data-* mount points
  ansible.builtin.find:
    paths: /mnt
    patterns: "data-*"
    file_type: directory
  register: existing_mounts

- name: Unmount and remove stale mount points
  when: existing_mounts.matched > 0
  block:
    - name: Unmount stale mount point
      ansible.posix.mount:
        path: "{{ item.path }}"
        state: unmounted
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', data_disks | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
    - name: Remove stale mount point directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ existing_mounts.files | rejectattr('path', 'in', data_disks | map('basename') | map('regex_replace', '^', '/mnt/')) | list }}"
      loop_control:
        label: "{{ item.path }}"
