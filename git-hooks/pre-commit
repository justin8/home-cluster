#!/bin/sh
#
# Pre-commit hook to run ruff and prettier on new files and fully staged modified files
#

# Get all staged files (new, modified, renamed, copied)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=AMRC)

# Get files that have unstaged changes
UNSTAGED_FILES=$(git diff --name-only)

# Filter out files that have unstaged changes (to avoid formatting partial changes)
SAFE_TO_FORMAT=""
for file in $STAGED_FILES; do
    # Check if this file has unstaged changes
    if ! echo "$UNSTAGED_FILES" | grep -q "^$file$"; then
        SAFE_TO_FORMAT="$SAFE_TO_FORMAT $file"
    fi
done

# Separate by file type, excluding SOPS files
PYTHON_FILES=$(echo "$SAFE_TO_FORMAT" | tr ' ' '\n' | grep '\.py$' | grep -v '\.sops\.')
OTHER_FILES=$(echo "$SAFE_TO_FORMAT" | tr ' ' '\n' | grep -E '\.(yaml|yml|ts|js|json|md)$' | grep -v '\.sops\.')

# Format Python files with ruff
if [ -n "$PYTHON_FILES" ]; then
    echo "Running ruff format on Python files..."
    echo "$PYTHON_FILES" | xargs -r uvx ruff format
    if [ $? -ne 0 ]; then
        echo "Ruff formatting failed. Please fix the issues and try again."
        exit 1
    fi
    echo "$PYTHON_FILES" | xargs -r git add
fi

# Format other files (YAML, TypeScript, JavaScript, JSON, Markdown) with prettier
if [ -n "$OTHER_FILES" ]; then
    echo "Running prettier on YAML/TypeScript/JavaScript/JSON/Markdown files..."
    echo "$OTHER_FILES" | xargs -r npx prettier --write
    if [ $? -ne 0 ]; then
        echo "Prettier formatting failed. Please fix the issues and try again."
        exit 1
    fi
    echo "$OTHER_FILES" | xargs -r git add
fi

if [ -n "$PYTHON_FILES" ] || [ -n "$OTHER_FILES" ]; then
    echo "Code formatting complete."
else
    echo "No files safe to format (all staged files have unstaged changes or are SOPS files)."
fi

exit 0
